"""
A car travels from a starting position to a destination which is target miles east of the starting position.

There are gas stations along the way. The gas stations are represented as an array stations where stations[i] =
 [position_i, fuel_i] indicates that the ith gas station is position_i miles east of the starting position and has
 fuel_i liters of gas.

The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of
 gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas
 from the station into the car.

Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the
 destination, return -1.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the
 destination with 0 fuel left, it is still considered to have arrived.
"""
from heapq import heappop, heappush
from typing import List, Tuple


def min_refuel_stops_heap(target: int, start_fuel: int, stations: List[Tuple[int, int]]) -> int:
    """
    :param target: 1 <= target <= 1e9
    :param start_fuel: 1 <= start_fuel <= 1e9
    :param stations: 0 <= len(stations) <= 500 stations (position_i, fuel_i), in sorted order of position_i
        0 <= position_i <= position_i+1 < target, 1 <= fuel_i <= 1e9
    :return: min refuel stop required in the trip
    """
    max_fuel_in_past = []

    tank = start_fuel
    refuel_stop = prev_location = 0
    for location_i, fuel_i in stations + [(target, 0)]:
        tank -= (location_i - prev_location)
        while max_fuel_in_past and tank < 0:
            # must refuel in the past
            tank -= heappop(max_fuel_in_past)
            refuel_stop += 1
        if tank < 0:
            # can not reach the current station even if we refuel at every stop in the past
            return -1
        heappush(max_fuel_in_past, -fuel_i)
        prev_location = location_i

    return refuel_stop


def min_refuel_stops_dp(target: int, start_fuel: int, stations: List[Tuple[int, int]]) -> int:
    """
    :param target: 1 <= target <= 1e9
    :param start_fuel: 1 <= start_fuel <= 1e9
    :param stations: 0 <= len(stations) <= 500 stations (position_i, fuel_i), in sorted order of position_i
        0 <= position_i <= position_i+1 < target, 1 <= fuel_i <= 1e9
    :return: min refuel stop required in the trip
    """
    # max reach after i refuels
    max_reach = [start_fuel] + [0] * len(stations)
    for i, (location_i, fuel_i) in enumerate(stations):
        for refuel_count in range(i, -1, -1):
            if max_reach[refuel_count] >= location_i and max_reach[refuel_count + 1] < max_reach[refuel_count] + fuel_i:
                max_reach[refuel_count + 1] = max_reach[refuel_count] + fuel_i

    for refuel_count, reach in enumerate(max_reach):
        if reach >= target:
            return refuel_count
    return -1


test_cases = [(1, 1, [], 0),
              (100, 1, [(10, 100)], -1),
              (100, 10, [(10, 60), (20, 30), (30, 30), (60, 40)], 2),
              (1000, 1,
               [(1, 53), (2, 308), (3, 323), (6, 229), (8, 88), (10, 324), (11, 239), (15, 174), (17, 234), (19, 5),
                (21, 39), (22, 328), (23, 49), (26, 283), (30, 58), (31, 329), (37, 119), (39, 303), (42, 46), (43, 61),
                (46, 315), (49, 51), (52, 300), (53, 36), (54, 230), (55, 205), (56, 186), (57, 227), (58, 325),
                (61, 87), (63, 99), (64, 134), (67, 88), (70, 309), (73, 158), (75, 129), (76, 94), (78, 292), (79, 88),
                (80, 242), (81, 184), (84, 79), (85, 244), (89, 153), (91, 32), (93, 223), (94, 329), (97, 52),
                (99, 149), (101, 169), (109, 223), (110, 75), (111, 25), (115, 333), (116, 164), (117, 170), (120, 285),
                (122, 1), (123, 163), (125, 34), (129, 43), (130, 19), (131, 36), (133, 164), (135, 259), (136, 164),
                (137, 295), (138, 262), (139, 12), (143, 60), (144, 232), (145, 100), (146, 321), (148, 98), (152, 52),
                (153, 71), (154, 306), (156, 333), (157, 92), (161, 170), (167, 109), (168, 21), (169, 208), (172, 92),
                (173, 70), (174, 265), (178, 309), (179, 275), (182, 58), (183, 228), (185, 190), (187, 152),
                (188, 272), (192, 112), (193, 313), (194, 254), (195, 27), (196, 63), (198, 95), (200, 181), (202, 73),
                (203, 230), (207, 270), (209, 291), (212, 145), (213, 136), (214, 283), (215, 52), (217, 170),
                (218, 58), (220, 128), (226, 224), (227, 96), (232, 302), (233, 243), (239, 216), (240, 298),
                (241, 292), (244, 175), (245, 239), (246, 321), (247, 328), (250, 302), (251, 277), (253, 160),
                (256, 111), (257, 97), (258, 291), (259, 281), (261, 107), (266, 44), (267, 226), (268, 274),
                (273, 313), (275, 174), (276, 24), (281, 105), (285, 53), (286, 307), (290, 295), (291, 54), (296, 252),
                (297, 73), (299, 216), (303, 173), (306, 226), (311, 76), (312, 123), (314, 159), (315, 168),
                (316, 171), (317, 214), (318, 132), (319, 2), (322, 43), (323, 196), (324, 222), (326, 277), (327, 234),
                (329, 125), (330, 168), (331, 300), (333, 281), (335, 293), (336, 67), (337, 283), (338, 65), (340, 96),
                (342, 122), (343, 97), (345, 215), (347, 21), (348, 151), (352, 324), (354, 280), (355, 187),
                (356, 173), (360, 171), (361, 33), (363, 253), (368, 327), (369, 39), (371, 176), (373, 18), (374, 132),
                (376, 292), (377, 326), (378, 47), (379, 259), (382, 282), (384, 276), (386, 310), (387, 52), (388, 74),
                (389, 119), (390, 169), (391, 17), (393, 4), (394, 285), (395, 214), (396, 186), (397, 168), (400, 88),
                (401, 33), (403, 282), (406, 132), (408, 96), (409, 330), (410, 252), (412, 167), (413, 132), (418, 85),
                (419, 187), (421, 89), (423, 296), (427, 51), (428, 121), (429, 203), (432, 265), (434, 265), (438, 40),
                (439, 214), (445, 193), (447, 303), (448, 319), (451, 255), (452, 155), (453, 141), (454, 306),
                (456, 80), (457, 99), (458, 184), (461, 219), (463, 22), (464, 92), (466, 178), (467, 194), (469, 156),
                (470, 189), (471, 91), (472, 294), (473, 156), (474, 63), (476, 75), (477, 66), (478, 155), (479, 31),
                (482, 104), (484, 176), (486, 219), (487, 31), (490, 101), (492, 258), (493, 149), (495, 274),
                (496, 236), (497, 311), (499, 176), (500, 120), (503, 19), (509, 332), (511, 189), (512, 116),
                (514, 53), (515, 259), (516, 253), (517, 65), (519, 204), (522, 294), (525, 179), (528, 283),
                (529, 271), (532, 50), (533, 279), (536, 168), (541, 297), (542, 204), (543, 174), (546, 178),
                (549, 165), (551, 38), (554, 267), (556, 318), (558, 27), (559, 233), (560, 245), (561, 206),
                (564, 250), (565, 194), (567, 66), (570, 326), (571, 79), (573, 34), (575, 262), (576, 303), (577, 15),
                (581, 149), (582, 117), (583, 103), (584, 98), (585, 147), (588, 250), (589, 325), (590, 305),
                (593, 150), (595, 28), (596, 262), (598, 217), (600, 218), (601, 7), (602, 206), (605, 267), (607, 165),
                (609, 197), (612, 52), (615, 285), (617, 314), (622, 125), (624, 277), (628, 329), (629, 137),
                (630, 53), (631, 286), (633, 293), (636, 126), (639, 323), (640, 176), (642, 164), (650, 310),
                (651, 208), (652, 254), (653, 248), (655, 42), (657, 36), (658, 137), (663, 79), (664, 86), (665, 96),
                (666, 300), (667, 52), (669, 181), (671, 210), (673, 140), (675, 24), (676, 2), (678, 19), (680, 187),
                (682, 13), (684, 214), (685, 332), (687, 177), (697, 311), (698, 74), (701, 296), (703, 291),
                (704, 314), (707, 332), (710, 285), (712, 60), (718, 120), (719, 30), (721, 257), (724, 321), (727, 25),
                (728, 178), (729, 101), (732, 254), (733, 223), (737, 210), (738, 132), (741, 2), (743, 7), (745, 82),
                (748, 288), (752, 164), (754, 148), (756, 310), (757, 181), (758, 268), (759, 27), (760, 120),
                (761, 297), (766, 79), (770, 236), (771, 69), (772, 92), (773, 58), (775, 164), (776, 243), (777, 143),
                (780, 31), (783, 297), (785, 37), (786, 202), (787, 259), (789, 289), (790, 5), (791, 261), (793, 3),
                (797, 285), (802, 18), (806, 52), (810, 296), (812, 89), (813, 65), (816, 45), (817, 110), (818, 211),
                (822, 25), (823, 249), (825, 33), (826, 112), (827, 219), (828, 169), (831, 52), (837, 322), (840, 332),
                (845, 238), (846, 189), (848, 316), (854, 166), (856, 301), (857, 243), (858, 327), (860, 231),
                (866, 304), (867, 21), (869, 190), (871, 61), (873, 238), (874, 103), (877, 184), (878, 86), (879, 182),
                (880, 286), (881, 324), (882, 226), (883, 49), (884, 9), (887, 1), (888, 189), (889, 212), (892, 54),
                (895, 108), (896, 79), (897, 304), (900, 175), (901, 31), (902, 51), (904, 18), (909, 214), (910, 23),
                (915, 309), (921, 326), (926, 219), (927, 261), (928, 240), (931, 69), (933, 127), (935, 244),
                (936, 292), (937, 174), (938, 111), (939, 69), (942, 321), (944, 271), (947, 301), (949, 158),
                (950, 309), (952, 277), (954, 2), (955, 34), (957, 312), (958, 119), (960, 190), (961, 145), (963, 199),
                (964, 13), (965, 217), (966, 203), (967, 309), (968, 39), (969, 267), (970, 51), (974, 176), (975, 20),
                (976, 308), (977, 324), (978, 203), (979, 101), (980, 32), (981, 274), (983, 107), (984, 124),
                (987, 252), (988, 68), (990, 28), (993, 122), (998, 157), (999, 153)], 4),
              ]
for min_refuel_stops in [min_refuel_stops_heap, min_refuel_stops_dp, ]:
    for test_target, test_start, test_stations, expected_value in test_cases:
        assert min_refuel_stops(test_target, test_start, test_stations) == expected_value, min_refuel_stops.__name__

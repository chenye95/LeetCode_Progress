"""
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence
from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without
changing its order. e.g. "baab" is a subsequence of "baaaba"

A string is called palindrome if is one that reads the same backward as well as forward.
"""


def remove_palindrome_sub(s: str) -> int:
    """
    if s is palindrome, return 1; else return 2
    :param s: a string consists of only 'a' and 'b'
    """
    if not s:
        return 0
    elif s[::-1] == s:
        return 1
    else:
        return 2


test_cases = [("ababa", 1),
              ("abb", 2),
              ("baabb", 2),
              ("", 0), ]
for test_input, expected_output in test_cases:
    assert remove_palindrome_sub(test_input) == expected_output

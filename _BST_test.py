from copy import deepcopy

from _BST import BST
from _Binary_Tree import TreeNode, ConstructTree
from _Linked_List import LinkedList

values = list(range(1, 19, 2))
values.append(12)
values.reverse()
new_bst = BST(values)
assert new_bst.balance_factor() == 0
assert values == new_bst.traversal()
assert new_bst.is_balanced()

new_bst.insert(6)
values.append(6)
values.sort()
assert values == new_bst.traversal()

new_bst.insert(8)
new_bst.insert(10)
new_bst.insert(16)
new_bst.insert(16.5)
new_bst.insert(19)
assert new_bst.is_valid()
assert not new_bst.is_balanced()
values.extend([8, 10, 16, 16.5, 19])

values.sort()
assert values == new_bst.traversal()

for i in range(len(values)):
    deletion_tree = deepcopy(new_bst)
    assert deletion_tree.delete_node(values[i])
    assert deletion_tree.is_valid()
    # print('Deleted: %d, Remaining: %s' % (values[i], str(deletion_tree.traversal())))
    assert deletion_tree.traversal() == values[:i] + values[i + 1:]

assert not new_bst.delete_node(20)
assert not new_bst.delete_node(7.5)
assert not new_bst.is_balanced()

new_bst.hard_re_balance()
assert new_bst.is_balanced()
assert values == new_bst.traversal()
assert -1 <= new_bst.balance_factor() <= 1
assert new_bst.look_up(6)
assert not new_bst.look_up(14)

for i in range(len(values)):
    deletion_tree = deepcopy(new_bst)
    assert deletion_tree.delete_node(values[i])
    assert deletion_tree.is_valid()
    # print('Deleted: %d, Remaining: %s' % (values[i], str(deletion_tree.traversal())))
    assert deletion_tree.traversal() == values[:i] + values[i + 1:]

expected_values = [6, 7, 8, 9, 10, 11, 12, 13]
assert new_bst.traverse_range(6, 13) == expected_values
assert new_bst.traverse_range(6, 14) == expected_values
assert new_bst.traverse_range(5.5, 13) == expected_values

sorted_list = list(range(1, 11))
head = LinkedList.create_linked_list(sorted_list)
new_bst = BST(head)
assert new_bst.traversal() == sorted_list
assert new_bst.is_balanced()

new_bst = BST([-1])
new_bst.root.right = TreeNode(1)
new_bst.root.right.left = TreeNode(-1)
assert new_bst.is_valid()

new_bst = BST([1])
new_bst.root.left = TreeNode(-1)
new_bst.root.left.right = TreeNode(1)
assert not new_bst.is_valid()

new_bst = BST([1, 3, 4])
new_bst.root.left.right = TreeNode(2)
for i in range(1, 5):
    assert new_bst.kth_smallest_element(i) == i, "Expecting %d got %d" % (i, new_bst.kth_smallest_element(i))
assert new_bst.kth_smallest_element(5) is None

new_bst = BST([5, 3, 6])
new_bst.insert(2)
new_bst.insert(4)
new_bst.insert(7)
assert new_bst.leetcode_traversal() == [5, 3, 6, 2, 4, None, 7, None, None, None, None, None, None]
new_bst.delete_node(3)
assert new_bst.leetcode_traversal() == [5, 4, 6, 2, None, None, 7, None, None, None, None] or \
       new_bst.leetcode_traversal() == [5, 2, 6, None, 4, None, 7, None, None, None, None]

# Test Range Sum
test_cases = [([10, 5, 15, 3, 7, None, 18], 7, 15, 32),
              ([10, 5, 15, 3, 7, 13, 18, 1, None, 6], 6, 10, 23),
              ([174, 99, 249, 60, 138, 213, 288, 42, 81, 120, 156, 195, 231, 270, 306, 33, 51, 72, 90, 111, 129, 147,
                165, 186, 204, 222, 240, 261, 279, 297, 315, 27, 39, 48, 57, 66, 78, 87, 96, 105, 117, 126, 135, 144,
                153, 162, 171, 180, 192, 201, 210, 219, 228, 237, 246, 255, 267, 276, 285, 294, 303, 312, 321, 24, 30,
                36, None, 45, None, 54, None, 63, 69, 75, None, 84, None, 93, None, 102, 108, 114, None, 123, None, 132,
                None, 141, None, 150, None, 159, None, 168, None, 177, 183, 189, None, 198, None, 207, None, 216, None,
                225, None, 234, None, 243, None, 252, 258, 264, None, 273, None, 282, None, 291, None, 300, None, 309,
                None, 318], 261, 288, 2745),
              ([182, 107, 257, 68, 146, 221, 296, 50, 89, 128, 164, 203, 239, 278, 314, 41, 59, 80, 98, 119, 137, 155,
                173, 194, 212, 230, 248, 269, 287, 305, 323, 35, 47, 56, 65, 74, 86, 95, 104, 113, 125, 134, 143, 152,
                161, 170, 179, 188, 200, 209, 218, 227, 236, 245, 254, 263, 275, 284, 293, 302, 311, 320, 329, 32, 38,
                44, None, 53, None, 62, None, 71, 77, 83, None, 92, None, 101, None, 110, 116, 122, None, 131, None,
                140, None, 149, None, 158, None, 167, None, 176, None, 185, 191, 197, None, 206, None, 215, None, 224,
                None, 233, None, 242, None, 251, None, 260, 266, 272, None, 281, None, 290, None, 299, None, 308, None,
                317, None, 326], 86, 224, 7285),
              ([1895, 1395, 2395, 1145, 1645, 2145, 2645, 1019, 1271, 1521, 1771, 2021, 2271, 2521, 2771, 957, 1083,
                1209, 1333, 1459, 1583, 1709, 1833, 1959, 2083, 2209, 2333, 2459, 2583, 2709, 2833, 925, 989, 1051,
                1115, 1177, 1241, 1303, 1365, 1427, 1491, 1553, 1615, 1677, 1741, 1803, 1865, 1927, 1991, 2053, 2115,
                2177, 2241, 2303, 2365, 2427, 2491, 2553, 2615, 2677, 2741, 2803, 2865, 909, 941, 973, 1005, 1035, 1067,
                1099, 1131, 1161, 1193, 1225, 1257, 1287, 1319, 1349, 1381, 1411, 1443, 1475, 1507, 1537, 1569, 1599,
                1631, 1661, 1693, 1725, 1757, 1787, 1819, 1849, 1881, 1911, 1943, 1975, 2007, 2037, 2069, 2099, 2131,
                2161, 2193, 2225, 2257, 2287, 2319, 2349, 2381, 2411, 2443, 2475, 2507, 2537, 2569, 2599, 2631, 2661,
                2693, 2725, 2757, 2787, 2819, 2849, 2881, 901, 917, 933, 949, 965, 981, 997, 1013, 1027, 1043, 1059,
                1075, 1091, 1107, 1123, 1139, 1153, 1169, 1185, 1201, 1217, 1233, 1249, 1265, 1279, 1295, 1311, 1327,
                1341, 1357, 1373, 1389, 1403, 1419, 1435, 1451, 1467, 1483, 1499, 1515, 1529, 1545, 1561, 1577, 1591,
                1607, 1623, 1639, 1653, 1669, 1685, 1701, 1717, 1733, 1749, 1765, 1779, 1795, 1811, 1827, 1841, 1857,
                1873, 1889, 1903, 1919, 1935, 1951, 1967, 1983, 1999, 2015, 2029, 2045, 2061, 2077, 2091, 2107, 2123,
                2139, 2153, 2169, 2185, 2201, 2217, 2233, 2249, 2265, 2279, 2295, 2311, 2327, 2341, 2357, 2373, 2389,
                2403, 2419, 2435, 2451, 2467, 2483, 2499, 2515, 2529, 2545, 2561, 2577, 2591, 2607, 2623, 2639, 2653,
                2669, 2685, 2701, 2717, 2733, 2749, 2765, 2779, 2795, 2811, 2827, 2841, 2857, 2873, 2889, 897, 905, 913,
                921, 929, 937, 945, 953, 961, 969, 977, 985, 993, 1001, 1009, 1017, 1023, 1031, 1039, 1047, 1055, 1063,
                1071, 1079, 1087, 1095, 1103, 1111, 1119, 1127, 1135, 1143, 1149, 1157, 1165, 1173, 1181, 1189, 1197,
                1205, 1213, 1221, 1229, 1237, 1245, 1253, 1261, 1269, 1275, 1283, 1291, 1299, 1307, 1315, 1323, 1331,
                1337, 1345, 1353, 1361, 1369, 1377, 1385, 1393, 1399, 1407, 1415, 1423, 1431, 1439, 1447, 1455, 1463,
                1471, 1479, 1487, 1495, 1503, 1511, 1519, 1525, 1533, 1541, 1549, 1557, 1565, 1573, 1581, 1587, 1595,
                1603, 1611, 1619, 1627, 1635, 1643, 1649, 1657, 1665, 1673, 1681, 1689, 1697, 1705, 1713, 1721, 1729,
                1737, 1745, 1753, 1761, 1769, 1775, 1783, 1791, 1799, 1807, 1815, 1823, 1831, 1837, 1845, 1853, 1861,
                1869, 1877, 1885, 1893, 1899, 1907, 1915, 1923, 1931, 1939, 1947, 1955, 1963, 1971, 1979, 1987, 1995,
                2003, 2011, 2019, 2025, 2033, 2041, 2049, 2057, 2065, 2073, 2081, 2087, 2095, 2103, 2111, 2119, 2127,
                2135, 2143, 2149, 2157, 2165, 2173, 2181, 2189, 2197, 2205, 2213, 2221, 2229, 2237, 2245, 2253, 2261,
                2269, 2275, 2283, 2291, 2299, 2307, 2315, 2323, 2331, 2337, 2345, 2353, 2361, 2369, 2377, 2385, 2393,
                2399, 2407, 2415, 2423, 2431, 2439, 2447, 2455, 2463, 2471, 2479, 2487, 2495, 2503, 2511, 2519, 2525,
                2533, 2541, 2549, 2557, 2565, 2573, 2581, 2587, 2595, 2603, 2611, 2619, 2627, 2635, 2643, 2649, 2657,
                2665, 2673, 2681, 2689, 2697, 2705, 2713, 2721, 2729, 2737, 2745, 2753, 2761, 2769, 2775, 2783, 2791,
                2799, 2807, 2815, 2823, 2831, 2837, 2845, 2853, 2861, 2869, 2877, 2885, 2893, 895, 899, 903, 907, 911,
                915, 919, 923, 927, 931, 935, 939, 943, 947, 951, 955, 959, 963, 967, 971, 975, 979, 983, 987, 991, 995,
                999, 1003, 1007, 1011, 1015, None, 1021, 1025, 1029, 1033, 1037, 1041, 1045, 1049, 1053, 1057, 1061,
                1065, 1069, 1073, 1077, 1081, 1085, 1089, 1093, 1097, 1101, 1105, 1109, 1113, 1117, 1121, 1125, 1129,
                1133, 1137, 1141, None, 1147, 1151, 1155, 1159, 1163, 1167, 1171, 1175, 1179, 1183, 1187, 1191, 1195,
                1199, 1203, 1207, 1211, 1215, 1219, 1223, 1227, 1231, 1235, 1239, 1243, 1247, 1251, 1255, 1259, 1263,
                1267, None, 1273, 1277, 1281, 1285, 1289, 1293, 1297, 1301, 1305, 1309, 1313, 1317, 1321, 1325, 1329,
                None, 1335, 1339, 1343, 1347, 1351, 1355, 1359, 1363, 1367, 1371, 1375, 1379, 1383, 1387, 1391, None,
                1397, 1401, 1405, 1409, 1413, 1417, 1421, 1425, 1429, 1433, 1437, 1441, 1445, 1449, 1453, 1457, 1461,
                1465, 1469, 1473, 1477, 1481, 1485, 1489, 1493, 1497, 1501, 1505, 1509, 1513, 1517, None, 1523, 1527,
                1531, 1535, 1539, 1543, 1547, 1551, 1555, 1559, 1563, 1567, 1571, 1575, 1579, None, 1585, 1589, 1593,
                1597, 1601, 1605, 1609, 1613, 1617, 1621, 1625, 1629, 1633, 1637, 1641, None, 1647, 1651, 1655, 1659,
                1663, 1667, 1671, 1675, 1679, 1683, 1687, 1691, 1695, 1699, 1703, 1707, 1711, 1715, 1719, 1723, 1727,
                1731, 1735, 1739, 1743, 1747, 1751, 1755, 1759, 1763, 1767, None, 1773, 1777, 1781, 1785, 1789, 1793,
                1797, 1801, 1805, 1809, 1813, 1817, 1821, 1825, 1829, None, 1835, 1839, 1843, 1847, 1851, 1855, 1859,
                1863, 1867, 1871, 1875, 1879, 1883, 1887, 1891, None, 1897, 1901, 1905, 1909, 1913, 1917, 1921, 1925,
                1929, 1933, 1937, 1941, 1945, 1949, 1953, 1957, 1961, 1965, 1969, 1973, 1977, 1981, 1985, 1989, 1993,
                1997, 2001, 2005, 2009, 2013, 2017, None, 2023, 2027, 2031, 2035, 2039, 2043, 2047, 2051, 2055, 2059,
                2063, 2067, 2071, 2075, 2079, None, 2085, 2089, 2093, 2097, 2101, 2105, 2109, 2113, 2117, 2121, 2125,
                2129, 2133, 2137, 2141, None, 2147, 2151, 2155, 2159, 2163, 2167, 2171, 2175, 2179, 2183, 2187, 2191,
                2195, 2199, 2203, 2207, 2211, 2215, 2219, 2223, 2227, 2231, 2235, 2239, 2243, 2247, 2251, 2255, 2259,
                2263, 2267, None, 2273, 2277, 2281, 2285, 2289, 2293, 2297, 2301, 2305, 2309, 2313, 2317, 2321, 2325,
                2329, None, 2335, 2339, 2343, 2347, 2351, 2355, 2359, 2363, 2367, 2371, 2375, 2379, 2383, 2387, 2391,
                None, 2397, 2401, 2405, 2409, 2413, 2417, 2421, 2425, 2429, 2433, 2437, 2441, 2445, 2449, 2453, 2457,
                2461, 2465, 2469, 2473, 2477, 2481, 2485, 2489, 2493, 2497, 2501, 2505, 2509, 2513, 2517, None, 2523,
                2527, 2531, 2535, 2539, 2543, 2547, 2551, 2555, 2559, 2563, 2567, 2571, 2575, 2579, None, 2585, 2589,
                2593, 2597, 2601, 2605, 2609, 2613, 2617, 2621, 2625, 2629, 2633, 2637, 2641, None, 2647, 2651, 2655,
                2659, 2663, 2667, 2671, 2675, 2679, 2683, 2687, 2691, 2695, 2699, 2703, 2707, 2711, 2715, 2719, 2723,
                2727, 2731, 2735, 2739, 2743, 2747, 2751, 2755, 2759, 2763, 2767, None, 2773, 2777, 2781, 2785, 2789,
                2793, 2797, 2801, 2805, 2809, 2813, 2817, 2821, 2825, 2829, None, 2835, 2839, 2843, 2847, 2851, 2855,
                2859, 2863, 2867, 2871, 2875, 2879, 2883, 2887, 2891], 2791, 2851, 87451), ]
for test_tree_list, test_low, test_high, expected_output in test_cases:
    assert BST(ConstructTree.build_tree_leetcode(test_tree_list).root).range_accumulate(test_low,
                                                                                        test_high) == expected_output

"""
You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the
 following query n times:
- Find a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is
 maximized. k is the answer to the ith query.
- Remove the last element from the current array nums.

Return an array answer, where answer[i] is the answer to the ith query.
"""
from typing import List


def get_maximum_xor(nums: List[int], maximum_bit: int) -> List[int]:
    """
    :param nums: list of non-negative integers in ascending order, where 1 <= length <= 10**5; and
        0 <= nums[i] < 2 ** maximum_bit
    :param maximum_bit: query result k < 2 ** maximum_bit, 1 <= maximum_bit <= 20
    :return: results for each query
    """
    k = (1 << maximum_bit) - 1

    return_result = [0] * len(nums)
    for i, num_i in enumerate(nums):
        k ^= num_i
        return_result[i] = k

    return return_result[::-1]


test_cases = [([0, 1, 1, 3], 2, [0, 3, 2, 3]),
              ([2, 3, 4, 7], 3, [5, 2, 6, 5]),
              ([0, 1, 2, 2, 5, 7], 3, [4, 3, 6, 4, 6, 7]),
              ([1, 4, 4, 6, 15, 19, 34, 37, 38, 39, 40, 42, 42, 44, 52, 56, 59, 61, 65, 75, 78, 83, 84, 97, 97, 101,
                101, 104, 105, 106, 106, 115, 124, 125, 129, 139, 140, 141, 141, 149, 153, 154, 158, 169, 174, 179, 192,
                195, 197, 199, 206, 209, 211, 212, 224, 226, 229, 233, 236, 238, 239, 244, 246, 246, 251, 259, 262, 265,
                265, 267, 279, 284, 289, 292, 295, 298, 302, 313, 314, 314, 325, 328, 338, 339, 340, 347, 353, 354, 356,
                358, 362, 364, 365, 368, 368, 371, 372, 373, 380, 385, 394, 397, 401, 401, 404, 408, 408, 415, 417, 419,
                437, 437, 441, 442, 445, 449, 450, 452, 453, 453, 454, 456, 460, 465, 467, 472, 473, 477, 477, 485, 487,
                488, 492, 495, 496, 497, 500, 506, 507, 525, 530, 538, 542, 543, 545, 547, 557, 561, 563, 564, 564, 574,
                575, 577, 581, 586, 586, 592, 598, 603, 607, 613, 616, 618, 624, 633, 634, 636, 640, 642, 644, 647, 649,
                650, 658, 660, 664, 669, 690, 691, 693, 694, 695, 707, 708, 713, 717, 719, 722, 726, 737, 740, 741, 742,
                745, 749, 757, 765, 772, 773, 773, 777, 781, 789, 795, 800, 801, 801, 803, 807, 812, 815, 818, 825, 828,
                838, 838, 841, 844, 848, 849, 850, 852, 855, 857, 861, 862, 867, 870, 873, 877, 878, 892, 905, 907, 911,
                912, 913, 916, 916, 918, 930, 934, 934, 939, 940, 942, 943, 946, 953, 954, 957, 970, 970, 970, 971, 974,
                979, 991, 993, 1003, 1009, 1015, 1017, 1020, 1024, 1026, 1028, 1031, 1035, 1035, 1044, 1050, 1051, 1062,
                1067, 1071, 1072, 1083, 1093, 1097, 1097, 1099, 1101, 1115, 1120, 1122, 1126, 1128, 1128, 1130, 1131,
                1131, 1133, 1137, 1137, 1142, 1143, 1145, 1159, 1163, 1170, 1171, 1173, 1174, 1184, 1185, 1187, 1198,
                1209, 1216, 1224, 1233, 1235, 1248, 1259, 1259, 1263, 1270, 1279, 1280, 1281, 1284, 1289, 1305, 1305,
                1306, 1312, 1320, 1324, 1326, 1329, 1331, 1338, 1340, 1350, 1353, 1356, 1357, 1366, 1366, 1375, 1375,
                1380, 1383, 1396, 1397, 1397, 1399, 1399, 1401, 1402, 1404, 1404, 1408, 1418, 1430, 1439, 1443, 1444,
                1444, 1448, 1450, 1453, 1454, 1457, 1460, 1464, 1466, 1476, 1476, 1483, 1494, 1503, 1515, 1516, 1516,
                1516, 1526, 1526, 1532, 1534, 1546, 1547, 1549, 1550, 1561, 1562, 1564, 1569, 1571, 1574, 1575, 1575,
                1583, 1590, 1596, 1597, 1598, 1601, 1603, 1604, 1606, 1609, 1609, 1622, 1622, 1629, 1632, 1639, 1639,
                1643, 1649, 1653, 1662, 1663, 1665, 1667, 1668, 1677, 1685, 1695, 1709, 1710, 1718, 1727, 1730, 1730,
                1733, 1734, 1738, 1738, 1739, 1759, 1760, 1760, 1765, 1768, 1770, 1770, 1773, 1777, 1791, 1793, 1795,
                1797, 1799, 1804, 1805, 1806, 1811, 1812, 1813, 1813, 1818, 1845, 1854, 1862, 1864, 1869, 1873, 1877,
                1881, 1884, 1885, 1887, 1888, 1888, 1889, 1891, 1891, 1892, 1893, 1895, 1897, 1905, 1905, 1907, 1908,
                1911, 1912, 1916, 1919, 1922, 1924, 1928, 1931, 1945, 1948, 1950, 1952, 1954, 1955, 1956, 1959, 1961,
                1966, 1975, 1977, 1980, 1984, 1999, 2001, 2005, 2006, 2012, 2012, 2014, 2016, 2024, 2025, 2027, 2030,
                2038, 2047], 11,
               [1121, 926, 1128, 902, 1133, 900, 1132, 908, 1106, 910, 1106, 900, 1105, 896, 1103, 911, 1075, 906,
                1085, 915, 1082, 925, 1081, 922, 1080, 920, 1030, 922, 1027, 904, 1024, 900, 1030, 889, 1029, 893,
                1034, 894, 1037, 892, 1037, 868, 1027, 870, 1026, 865, 1026, 867, 1027, 867, 1084, 865, 1085, 868,
                1073, 864, 1069, 869, 1059, 797, 1064, 818, 1063, 818, 1062, 821, 1083, 822, 1082, 829, 1080, 827,
                1082, 709, 1076, 729, 1075, 729, 1073, 724, 1076, 724, 1035, 704, 1034, 704, 1030, 707, 1025, 707,
                1148, 714, 1124, 713, 1110, 707, 1102, 714, 1097, 712, 1207, 713, 1212, 717, 1190, 705, 1190, 710,
                1179, 717, 1179, 722, 1179, 733, 1177, 730, 1179, 677, 1176, 676, 1170, 701, 1178, 701, 1179, 696,
                1177, 645, 1183, 646, 1160, 645, 1166, 644, 1914, 646, 1904, 646, 1898, 646, 1898, 641, 1886, 648,
                1859, 647, 1859, 761, 1857, 757, 1860, 746, 1863, 749, 1861, 737, 1861, 742, 1913, 751, 1893, 741,
                1945, 741, 1951, 742, 1937, 742, 1939, 742, 1938, 757, 1937, 718, 1937, 711, 1937, 732, 1936, 729,
                1951, 675, 1945, 682, 1947, 693, 1945, 689, 1937, 651, 1938, 651, 1922, 646, 1927, 647, 1656, 654,
                1633, 650, 1633, 641, 1618, 643, 1611, 651, 1586, 668, 1599, 670, 1598, 680, 1597, 686, 1596, 695,
                1584, 585, 1598, 584, 1593, 584, 1573, 590, 1573, 591, 1575, 591, 1577, 587, 1579, 624, 1597, 630,
                1599, 630, 1587, 520, 1592, 535, 1596, 538, 1537, 539, 1551, 516, 1551, 520, 1548, 526, 1550, 1522,
                1547, 1532, 1549, 1510, 1543, 1496, 1547, 1477, 1550, 1476, 1550, 1476, 1657, 1475, 1658, 1480, 1639,
                1481, 1637, 1486, 1640, 1486, 1644, 1530, 1646, 1530, 1643, 1531, 1652, 1535, 1654, 1290, 1636, 1289,
                1632, 1286, 1637, 1339, 1638, 1343, 1640, 1340, 1646, 1343, 1647, 1315, 1642, 1324, 1642, 1366, 1647,
                1373, 1650, 1374, 1657, 1370, 1659, 1370, 1658, 1377, 1652, 1401, 1648, 1397, 1648, 1396, 1929, 1404,
                1937, 1400, 1950, 1403, 1951, 1406, 1960, 1402, 1973, 1400, 1969, 1397, 1974, 1281, 1975, 1282, 1969,
                1283, 1950, 1286, 1938, 1280, 1930, 1283, 1924, 1280, 1922, 1282, 1918, 1284, 1917, 1293, 1895, 1295,
                1898, 1333, 1902, 1336, 1896, 1314, 1896, 1325, 1900, 1363, 1901, 1369, 1901, 1374, 1903, 1346, 1889,
                1344, 1887, 1345, 1883, 1353, 1860, 1727, 1861, 1713, 1856, 1712, 1887, 1715, 1883, 1724, 1881, 1668,
                1881, 1664, 1880, 1675, 1882, 1686, 1886, 1688, 1885, 1688, 1884, 1694, 1887, 1762, 1880, 1761, 1876,
                1761, 1858, 1763, 1916, 1764, 1916, 1768, 1913, 1768, 1893, 1775, 1902, 1554, 1895, 1555, 1888, 1552,
                1888, 1549, 1889, 1547, 1901, 1545, 1899, 1546, 1873, 1541, 1878, 1540, 1868, 1545, 1843, 1545, 1840,
                1566, 1844, 1555, 1847, 1558, 1802, 1565, 1814, 1567, 1814, 1552, 1811, 2024, 1822, 2024, 1820, 2035,
                1821, 2033, 1816, 2045, 1823, 2047, 1835, 2040, 1833, 2023, 1824, 2021, 1830, 2022, 1877, 2043, 1874,
                1996, 1878, 1999, 1882, 2007, 1882, 2006, 1885, 2012, 1953, 2013, 1966, 1988, 1966, 1991, 1967, 1994,
                1967, 1998, 1967, 2043, 1960, 2022, 1965, 2028, 2001, 2026, 2002, 2022, 1994, 2016, 1994, 2018, 1989,
                2019, 1990, 2020, 2039, 2040, 2046, 2042, 2046]),
              ]
for test_nums, test_k, expected_output in test_cases:
    assert get_maximum_xor(test_nums, test_k) == expected_output

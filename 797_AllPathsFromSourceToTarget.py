"""
Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any
order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which
the edge (i, j) exists.
"""
from typing import List


def all_paths_source_target(graph: List[List[int]]) -> List[List[int]]:
    """
    BFS Solution

    :param graph: an acyclic graph, where graph[i] list all directed edge out of node i. 2 <= len(graph) <= 15
    :return: list of all paths from node 0 to node N-1
    """
    target_node = len(graph) - 1
    return_list = []
    running_path = [[0], ]

    while running_path:
        current_path = running_path.pop()
        current_node = current_path[-1]
        if current_node == target_node:
            return_list.append(current_path)
        else:
            for next_node in graph[current_node]:
                running_path.append(current_path + [next_node])

    return return_list


test_cases = [([[1, 2], [3], [3], []], [[0, 1, 3], [0, 2, 3]]),
              ([[4, 3, 1], [3, 2, 4], [3], [4], []], [[0, 4], [0, 3, 4], [0, 1, 3, 4], [0, 1, 2, 3, 4], [0, 1, 4]]),
              ([[1], []], [[0, 1]]),
              ([[1, 2, 3], [2], [3], []], [[0, 1, 2, 3], [0, 2, 3], [0, 3]]),
              ([[1, 3], [2], [3], []], [[0, 1, 2, 3], [0, 3]]),
              ([[3, 1], [4, 6, 7, 2, 5], [4, 6, 3], [6, 4], [7, 6, 5], [6], [7], []],
               [[0, 3, 6, 7], [0, 3, 4, 7], [0, 3, 4, 6, 7], [0, 3, 4, 5, 6, 7], [0, 1, 4, 7], [0, 1, 4, 6, 7],
                [0, 1, 4, 5, 6, 7], [0, 1, 6, 7], [0, 1, 7], [0, 1, 2, 4, 7], [0, 1, 2, 4, 6, 7], [0, 1, 2, 4, 5, 6, 7],
                [0, 1, 2, 6, 7], [0, 1, 2, 3, 6, 7], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 6, 7],
                [0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 5, 6, 7]]),
              ([[1, 4, 9, 3, 2, 7], [9, 5, 8, 2], [6, 5, 3, 4], [4, 7, 5, 9], [9, 5], [9, 6], [9, 7], [9, 8], [9], []],
               [[0, 7, 8, 9], [0, 7, 9], [0, 2, 4, 5, 6, 7, 8, 9], [0, 2, 4, 5, 6, 7, 9], [0, 2, 4, 5, 6, 9],
                [0, 2, 4, 5, 9], [0, 2, 4, 9], [0, 2, 3, 9], [0, 2, 3, 5, 6, 7, 8, 9], [0, 2, 3, 5, 6, 7, 9],
                [0, 2, 3, 5, 6, 9], [0, 2, 3, 5, 9], [0, 2, 3, 7, 8, 9], [0, 2, 3, 7, 9], [0, 2, 3, 4, 5, 6, 7, 8, 9],
                [0, 2, 3, 4, 5, 6, 7, 9], [0, 2, 3, 4, 5, 6, 9], [0, 2, 3, 4, 5, 9], [0, 2, 3, 4, 9],
                [0, 2, 5, 6, 7, 8, 9], [0, 2, 5, 6, 7, 9], [0, 2, 5, 6, 9], [0, 2, 5, 9], [0, 2, 6, 7, 8, 9],
                [0, 2, 6, 7, 9], [0, 2, 6, 9], [0, 3, 9], [0, 3, 5, 6, 7, 8, 9], [0, 3, 5, 6, 7, 9], [0, 3, 5, 6, 9],
                [0, 3, 5, 9], [0, 3, 7, 8, 9], [0, 3, 7, 9], [0, 3, 4, 5, 6, 7, 8, 9], [0, 3, 4, 5, 6, 7, 9],
                [0, 3, 4, 5, 6, 9], [0, 3, 4, 5, 9], [0, 3, 4, 9], [0, 9], [0, 4, 5, 6, 7, 8, 9], [0, 4, 5, 6, 7, 9],
                [0, 4, 5, 6, 9], [0, 4, 5, 9], [0, 4, 9], [0, 1, 2, 4, 5, 6, 7, 8, 9], [0, 1, 2, 4, 5, 6, 7, 9],
                [0, 1, 2, 4, 5, 6, 9], [0, 1, 2, 4, 5, 9], [0, 1, 2, 4, 9], [0, 1, 2, 3, 9],
                [0, 1, 2, 3, 5, 6, 7, 8, 9], [0, 1, 2, 3, 5, 6, 7, 9], [0, 1, 2, 3, 5, 6, 9], [0, 1, 2, 3, 5, 9],
                [0, 1, 2, 3, 7, 8, 9], [0, 1, 2, 3, 7, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 9],
                [0, 1, 2, 3, 4, 5, 6, 9], [0, 1, 2, 3, 4, 5, 9], [0, 1, 2, 3, 4, 9], [0, 1, 2, 5, 6, 7, 8, 9],
                [0, 1, 2, 5, 6, 7, 9], [0, 1, 2, 5, 6, 9], [0, 1, 2, 5, 9], [0, 1, 2, 6, 7, 8, 9], [0, 1, 2, 6, 7, 9],
                [0, 1, 2, 6, 9], [0, 1, 8, 9], [0, 1, 5, 6, 7, 8, 9], [0, 1, 5, 6, 7, 9], [0, 1, 5, 6, 9], [0, 1, 5, 9],
                [0, 1, 9]]), ]
for test_graph, expected_list in test_cases:
    assert sorted(all_paths_source_target(test_graph)) == sorted(expected_list)

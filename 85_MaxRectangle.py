"""
Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its
 area.
"""
from typing import List


def max_rectangle(matrix: List[List[str]]) -> int:
    """
    :param matrix: 0 <= len(matrix), len(matrix[0]) <= 200, '0' or '1' matrix
    :return: max rectangle of all '1' in the matrix
    """
    # Repeated run 84. Largest Rectangle In Histogram
    if not matrix or not matrix[0]:
        return 0
    n = len(matrix[0])
    height = [0] * (n + 1)
    max_area = 0
    for row_i in matrix:
        for j, matrix_i_j in enumerate(row_i):
            height[j] = height[j] + 1 if matrix_i_j == '1' else 0
        j_asc_order = [-1]
        for j, height_j in enumerate(height):
            while height_j < height[j_asc_order[-1]]:
                h = height[j_asc_order.pop()]
                w = j - 1 - j_asc_order[-1]
                if w * h > max_area:
                    max_area = w * h
            j_asc_order.append(j)
    return max_area


test_cases = [
    ([["1", "0", "1", "0", "0"], ["1", "0", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "0", "0", "1", "0"]], 6),
    ([], 0), ([[]], 0), ([['0']], 0), ([['1']], 1),
    ([["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"],
      ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1"]], 500),
    ([["1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1"],
      ["1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1"],
      ["0", "1", "0", "1", "1", "0", "1", "0", "0", "0", "0", "0"],
      ["0", "0", "1", "1", "1", "0", "0", "0", "1", "0", "1", "0"],
      ["1", "0", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1"],
      ["1", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0"],
      ["0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0"],
      ["0", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1"],
      ["1", "0", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0"],
      ["0", "1", "1", "1", "0", "1", "0", "0", "0", "1", "0", "0"]], 5),
]
for test_matrix, expected_value in test_cases:
    assert max_rectangle(test_matrix) == expected_value

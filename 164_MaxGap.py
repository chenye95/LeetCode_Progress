"""
Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the
 array contains less than two elements, return 0.

You must write an algorithm that runs in linear time and uses linear extra space.
"""
from typing import List


def max_gap_sort(nums: List[int]) -> int:
    """
    :param nums: 1 <= len(nums) <= 10000, 0 <= nums[i] <= 1e9
    :return: maximum difference between two successive elements in sorted(nums). return 0 if len(nums) < 2
    """
    if len(nums) < 2:
        return 0
    nums.sort()
    return max(big_num - small_num for small_num, big_num in zip(nums[:-1], nums[1:]))


def max_gap_bucket(nums: List[int]) -> int:
    """
    Divide max(nums) - min(nums) into n - 1 segments/buckets. Result has to be greater or equal to
        (max(nums) - min(nums)) // (n - 1).

    Notice that for num_a, num_b in the same bucket, their difference is guaranteed to be less than
        (max(nums) - min(nums)) // (n - 1). And abs(num_a - num_b) cannot be the max difference.

    :param nums: 1 <= len(nums) <= 10000, 0 <= nums[i] <= 1e9
    :return: maximum difference between two successive elements in sorted(nums). return 0 if len(nums) < 2
    """
    n = len(nums)
    num_lo = min(nums)
    total_difference = max(nums) - num_lo
    if n <= 2 or total_difference == 0:
        return total_difference

    buckets = [[] for _ in range(n)]
    for num_i in nums:
        bucket_index = (num_i - num_lo) * (n - 1) // total_difference
        buckets[bucket_index].append(num_i)

    buckets_min_max = [(min(bucket_i), max(bucket_i)) for bucket_i in buckets if bucket_i]
    return max(big_bucket_min - small_bucket_max
               for (_, small_bucket_max), (big_bucket_min, _) in zip(buckets_min_max[:-1], buckets_min_max[1:]))


test_cases = [([3, 6, 9, 1], 3),
              ([1, 3, 100], 97),
              ([10], 0),
              ([1, 10000000], 9999999),
              ([13684, 13701, 15157, 2344, 28728, 16001, 9900, 7367, 30607, 5408, 17186, 13230, 1598, 9766, 13083,
                27618, 29065, 9171, 2470, 20163, 5530, 20665, 14818, 4743, 24871, 27852, 8129, 4071, 17488, 30904, 1548,
                16408, 1734, 17271, 19880, 22269, 18738, 30242, 6679, 19867, 13781, 4615, 10049, 28877, 9323, 5373,
                11381, 18489, 13654, 14324, 28843, 27010, 10232, 31696, 29708, 3008, 28769, 30840, 21172, 28461, 20522,
                8745, 17590, 27936, 30368, 30993, 24416, 17472], 2147),
              ([119458430, 410028302, 15982430, 357241335, 694698590, 529536210, 10295004, 340726408, 376705042,
                5648398, 425888724, 86150790, 141550201, 28628951, 75242355, 441374731, 33363303, 102347550, 225909314,
                214275444, 244909062, 855305835, 237845472, 3355885, 51545952, 135311344, 157929786, 527907114,
                89782308, 94647333, 8910464, 344171577, 116390552, 346980625, 278264060, 268489590, 804080832,
                716690440, 2426580, 19004370, 133272093, 252996210, 468692992, 199336776, 293697212, 140484060,
                252870691, 515767290, 68435274, 17093532, 442238940, 512174759, 59982768, 110430496, 423197815,
                133049526, 396334614, 195512240, 698061558, 439133815, 18761859, 245630732, 34904140, 395302910,
                130676087, 431466938, 16627844, 166879053, 12372060, 49183701, 610095167, 702709920, 268394716,
                414536880, 3427575, 6691692, 491903478, 483507682, 3070270, 85414784, 5099136, 90587601, 142649685,
                118404720, 842001390, 558266077, 312767292, 544397826, 191075058, 526146660, 110684881, 517521627,
                30493560, 48581148, 740481424, 50160000, 13157144, 19385314, 163198805, 26886400, 133712000, 912151324,
                48210912, 133547250, 52982906, 197472724, 208125504, 837346, 709414284, 396336348, 60213406, 623044591,
                17630886, 147180747, 387038799, 752489738, 19244553, 246993366, 12712240, 38527412, 735167847, 5650645,
                41681390, 88521660, 506419704, 112878845, 217291473, 78666952, 270974445, 67984895, 380932470,
                243841688, 8850110, 666691696, 304193860, 43211280, 198116823, 33948796, 13335525, 28420812, 21050712,
                756482508, 128778464, 170400077, 298966045, 241786051, 215049569, 14209914, 79150986, 24352440, 2116400,
                65035575, 775059750, 57782506, 571417902, 466282355, 17766714, 538008622, 665264180, 2117532, 178667473,
                755760948, 641674494, 685749764, 378972351, 660147070, 438379281, 23188440, 706912830, 5572941,
                274989216, 99784281, 857173344, 600184575, 301751644, 214164810, 659915900, 383952912, 8481186,
                162511173, 100142682, 549049700, 209229028, 37982520, 382106825, 138857280, 245934684, 535442040,
                468179010, 54055316, 32480100, 690569635, 84640120, 33317120, 5642820, 154232160, 285539970, 119883575,
                89168962, 370189908, 70960941, 500751504, 195606720, 11929730, 400311912, 18992646, 87712940, 16851726,
                128856126, 319801524, 197542912, 208377480, 454448880, 765892862, 64000432, 110419260, 162102932,
                13562620, 390161466, 801080960, 272334192, 470694965, 237498086, 202663747, 257755446, 235713269,
                203990625, 129525760, 35067109, 229728632, 291737083, 376510302, 78974950, 98342706, 8990602, 666869410,
                1254669, 78094600, 196383867, 31448198, 148435928, 309242010, 82166032, 23200666, 197811280, 628895010,
                325339577, 20031264, 5071729, 291573105, 154858160, 354686068, 525529860, 193712025, 291968541,
                78746580, 155359008, 452569520, 419772492, 434216667, 8105543, 229222994, 27549552, 37935126, 113570474,
                922373616, 639252950, 493639960, 476380630, 431031908, 31790762, 210544806, 17778084, 119418138,
                206927570, 36597600, 163780056, 543271210, 447340280, 544898816, 611803668, 604361730, 247409239,
                410379840, 335820, 47584368, 657907250, 256298595, 175246445, 103401100, 985822236, 82407754, 375456872,
                277085610, 20940032, 7602130, 263623668, 624148511, 31428831, 41502413, 627479996, 178545044, 20512233,
                452471045, 12947552, 110520912, 205450345, 229625910, 48527220, 111079904, 595135620, 402737010,
                18232903, 5500680, 279678301, 73265530, 110349876, 68149872, 30556512, 29704584, 594177147, 254648576,
                59403834, 29461485, 99749100, 14924800, 104989500, 272741678, 19435955, 197495298, 46066566, 22311681,
                94362997, 197386436, 23533699, 455842044, 483385025, 59460616, 831293700, 6408891, 628465310, 4115578,
                394652304, 32231760, 35254602, 44157960, 427490670, 51320565, 927766971, 117541914, 310797000,
                321006786, 522594000, 60382323, 440867925, 72305472, 87839850, 222566545, 81488225, 304458750,
                299897136, 153407224, 171569840, 858642093, 129862580, 216602945, 190715364, 661243282, 323834118,
                460776228, 370760012, 39348248, 73766112, 146395197, 236149479, 325768597, 252750196, 628500093,
                438397270, 907074, 535412620, 205098718, 87239609, 185756064, 40103341, 385671138, 18138120, 528855629,
                257931315, 106414084, 774346496, 92061346, 345273908, 182427657, 8189075, 72743840, 90180272, 211858911,
                2360232, 831433071, 9551980, 148009276, 283078048, 320771004, 900209310, 98962920, 24433302, 679558806,
                2613915, 395736396, 17177988, 251675190, 75214429, 112437630, 179743448, 317896579, 109450689,
                240366413, 190951350, 53456996, 63545394, 765989516, 608856880, 430709760, 687381972, 46899156,
                220609950, 18909450, 30726138, 522034125, 114667420, 26237256, 448349745, 937314708, 11764714, 53221326,
                441120358, 18030324, 84336252, 388939775, 557245150, 61863260, 2612727, 462836595, 226766828, 90428355,
                454333440], 48507528), ]
for max_gap in [max_gap_sort, max_gap_bucket, ]:
    for test_nums, expected_value in test_cases:
        assert max_gap(test_nums) == expected_value, max_gap.__name__
